extends ./_layout.jade
block content
  .cover
    .container.cover-container

      .headline 
        h1 You only have to bring the container, we host it for you
        .signup
      .ship
        img(src="/images/ship.png")


  .steps
    .container 
      h2.headline How it works
      ul.steps-container
        li.step
          .step__image
            img(src="/images/stepone.svg") 
          .step__number 1
          div.step__text You create the app you want and build a dockerfile to specify how to run it
        li.step 
          .step__image
            img(src="/images/steptwo.svg")
          .step__number 2
          div.step__text You push it to us via the docker cli
        li.step
          .step__image
            img(src="/images/stepthree.svg")
          .step__number 3
          div.step__text We host it for you, with automatic scaling, load-balancing, etc.

  .dockerfile
    .container.dockerfile-container
      .dockerfile__desc
        h2.headline Dockerfile

        p.
         A dockerfile is a description on how your service is going to work.
         In this example you can see we have a node.js machine image and the command the will
         run when the container is started is '$ npm start'.

        p This dockerfile is actually what runs this website.


      .dockerfile__editorcontainer
        .dockerfile__editor
          .dockerfile__editor__header
            .dockerfile__editor__header__icon
          pre.dockerfile__editor__content.
            #[span FROM] node:0.12

            #[span RUN] apt-get update -y --force-yes && \
                apt-get upgrade -y --force-yes

            #[span WORKDIR] /app

            #[span COPY] . /app

            #[span RUN] npm install

            #[span ENV] NODE_ENV production

            #[span RUN] npm run build

            #[span CMD] npm start

            #[span EXPOSE] 9000

  .terminal
    .container.terminal-container
      .terminal__window
        .terminal__window__header
          .terminal__window__header__icon
        pre.terminal__window__content.
          $ docker build -t username/image .
          Building username/image...
          Step 0 : FROM node:0.12
           ---> c03077d1e6a0
          ...

          $ docker login registry.blackbeard.io
          Username: blackbeard
          Password: *******
          E-mail: me@blackbeard.io

          Login succeed!

          $ docker push registry.blackbeard.io/username/image

      .terminal__desc
        h2.headline Deploying

        p.
          Then we need to build our docker image and push it to 
          blackbeard's registry.

        p.
          That is done by first building the image and tagging it
          with your username and an image name you can remember.

  .webpage
    .container.webpage-container
      .webpage__desc
        h2.headline Ready and scaled

        p.
          Done! Your website is online and ready for visitors. All done without 
          you needing to worry about anything, other than just your website. 
          Sorry, that we can't help you with that! ;-)
      .webpage__window
        .webpage__window__header
          .webpage__window__header__icon.webpage__window__header__icon--red
          .webpage__window__header__icon.webpage__window__header__icon--yellow
          .webpage__window__header__icon.webpage__window__header__icon--green
          .webpage__window__addressbar
            input(type='text', value='https://mywebsite.dk')
        .webpage__window__content.
          It works!

  .works
    .container.works-container
      h2.typo__headline.typo__headline--mediumblue How it works behind the scenes
      .works__banner.
        Store your application image securely #[br] in our private Docker Registry.
      p.
        Once a Docker container is uploaded a 
        #[span(style='font-style: italic;' title='A CNAME record is a DNS record that acts as an alias of another record') CNAME] 
        will be provided that points to your running application.
      p.
        We use powerful servers and, due to the nature of containers, 
        we run many of them together on our custom server cluster.
        We have multiple load balancers to tunnel traffic to your containers in an intelligent manner. 
        We deploy by default two containers so at any one time redundancy is available.
      p.
        There is already so many good services that provide logging, so we have decided only to focus on deployment.
        Our recommendation is to use a dedicated service, and we can recommend #[a(href='https://www.loggly.com/') loggly.com] 
        and #[a(href='https://www.papertrailapp.com/') papertrailapp.com].
      p.
        Our servers will host your web application in a secure environment. Two-factor authentication can be enabled to ensure any changes to your hosting arrangement will be by a trusted person.


  #features.features
    img.features__headerimage(src="/images/features.png")
    h2.typo__headline.typo__headline--mediumblue Features

    .features__list
      .features__item Continuous Deployment
      p.features__item__desc.
       Deploying a new version is as easy as pushing a new image, and it will automatically be deployed. 
       That means if you want to rollback you just push an older image and it will become the current active image.

      .features__spacer
      .features__item Automatic load-balancing
      p.features__item__desc.
        We provide fast and scaled load-balancers that distribute the incoming traffic to your application.
      .features__spacer
      .features__item Free Docker image hosting
      p.features__item__desc.
        It is free to store your docker image on our service when you deploy your website on blackbeard.

  #pricing.pricing
    .container
      h2.typo__headline.typo__headline--white Pricing

      .pricetable
        .pricetable__scroll
          .priceitem
            .priceitem__details
              .priceitem__name.priceitem__name--silver Silver
              ul.priceitem__specs
                li 256 MB RAM per container
                li 100 GB traffic
                li Adequate CPU usage
              .priceitem__anchor
            .priceitem__price $4
            .priceitem__deploy DEPLOY
          .priceitem
            .priceitem__details
              .priceitem__name.priceitem__name--gold Gold
              ul.priceitem__specs
                li 512 MB RAM per container
                li 200 GB traffic
                li Adequate CPU usage
              .priceitem__anchor
            .priceitem__price $7
            .priceitem__deploy DEPLOY
          .priceitem
            .priceitem__details
              .priceitem__name.priceitem__name--diamond Diamond
              ul.priceitem__specs
                li 1 GB RAM per container
                li 300 GB traffic
                li Adequate CPU usage
              .priceitem__anchor
            .priceitem__price $14
            .priceitem__deploy DEPLOY

  #about.about
    .about__headerimage
      img(src="/images/about.png")
    h2.typo__headline.about__headline Who we are

    .persons-container
      .persons
        .person
          img.person__headshot(src="/images/james.jpg")
          h3.person__name James Brooking
          .person__text.
            My name is James and I am originally from Australia. I am passionate about cycling and
            running. During the week I like to get immersed in some backend programming.
            I am currently living in Copenhagen, where I like the free culture.
        .person
          img.person__headshot(src="/images/kevin.jpg")
          h3.person__name Kevin Simper
          .person__text.
            My name is Kevin and I live in Copenhagen. I am the co-organizer of
            Docker Copenhagen and am active in the javascript community. I like to
            write javascript and see myself as a FullStack developer. In my spare time
            I like to be active on my bikes and watch films.
  #contact.contact
    .container
      h2.typo__headline Got any questions?
      form.contact-form
        label Name
        input.name(type="text")
        label Email
        input.email(type="email")
        label Message
        textarea.message
        button.btn-send Send message

  .footer
    .container
      img(src="/images/contact-icon.png")
      div 2015
      
  script(src="/build/bundle.js")
